package edu.compscript.model.analisis;

// Importaciones.
import java_cup.runtime.Symbol;

parser code
{:
    Analizador s;
        parser(Analizador s) {this.s = s;}

        public void syntax_error(Symbol s) {
            System.out.println("Error sintáctico recuperable en la linea " + s.left + ", columna " + s.right);
        }

        public void unrecovered_syntax_error(Symbol s) {
            System.out.println("Error sintáctico no recuperable en la linea " + s.left + ", columna " + s.right);
        }
:}

action code
{:
    String consola = "";
:}

terminal String CADENA, ENTERO, DECIMAL;
terminal FINCADENA, IMPRIMIR;
terminal MAS, MENOS, MULT, DIV, PARENT_IZQ, PARENT_DER, UMENOS;

nonterminal INICIO;
nonterminal INSTRUCCIONES, INSTRUCCION;
nonterminal Double EXPRESION;

//  Precedencias.
precedence left MAS, MENOS;
precedence left MULT, DIV;
precedence right UMENOS;

start with INICIO;

// Escribir la gramatica.
INICIO ::= INSTRUCCIONES {: RESULT = consola; :}
;

INSRUCCIONES ::= INSTRUCCIONES INSTRUCCION
                | INSTRUCCION
;

INSTRUCCION ::= IMPRIMIR PARENT_IZQ EXPRESION:e PARENT_DER FINCADENA {: consola += e + "\n"; :}
                | IMPRIMIR PARENT_IZQ CADENA:c PARENT_DER FINCADENA {: consola += c + "\n"; :}
;

EXPRESION ::= MENOS EXPRESION:a {: RESULT = -a; :} %prec UMENOS
            | EXPRESION:a MAS EXPRESION:b {: RESULT = a + b; :}
            | EXPRESION:a MENOS EXPRESION:b {: RESULT = a - b; :}
            | EXPRESION:a MULT EXPRESION:b {: RESULT = a * b; :}
            | EXPRESION:a DIV EXPRESION:b {: RESULT = a / b; :}

            | PARENT_IZQ EXPRESION PARENT_DER {: RESULT = e; :}
            | ENTERO:e {: RESULT = new Double(e); :}
            | DECIMAL:e {: RESULT = new Double(e); :}
;