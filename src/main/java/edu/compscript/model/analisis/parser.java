
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.compscript.model.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import edu.compscript.model.interprete.abstracto.Instruccion;
import edu.compscript.model.interprete.simbolo.*;
import edu.compscript.model.interprete.expresiones.*;
import edu.compscript.model.interprete.expresiones.operadores.aritmeticos.*;
import edu.compscript.model.interprete.expresiones.operadores.logicos.*;
import edu.compscript.model.interprete.expresiones.operadores.relacionales.*;
import edu.compscript.model.interprete.instrucciones.*;
import edu.compscript.model.interprete.instrucciones.ciclos.*;
import edu.compscript.model.interprete.instrucciones.control.*;
import edu.compscript.model.interprete.instrucciones.control.utilidades.*;
import edu.compscript.model.interprete.excepciones.ErroresExpresiones;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\004\000\002\021" +
    "\011\000\002\021\015\000\002\024\010\000\002\024\007" +
    "\000\002\026\012\000\002\026\011\000\002\027\005\000" +
    "\002\027\003\000\002\032\007\000\002\032\005\000\002" +
    "\031\007\000\002\031\006\000\002\030\007\000\002\030" +
    "\005\000\002\014\004\000\002\015\004\000\002\007\006" +
    "\000\002\007\010\000\002\010\005\000\002\011\013\000" +
    "\002\011\015\000\002\011\011\000\002\006\010\000\002" +
    "\016\004\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\004\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\003\000\002\016\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\012\015\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\040\003\030\007\021\037\014\042\023\043" +
    "\007\044\041\045\020\046\010\047\031\050\027\053\035" +
    "\056\016\062\015\065\036\067\025\001\002\000\004\011" +
    "\262\001\002\000\044\002\ufffe\003\ufffe\007\ufffe\037\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050" +
    "\ufffe\053\ufffe\056\ufffe\061\ufffe\062\ufffe\065\ufffe\067\ufffe" +
    "\001\002\000\004\007\237\001\002\000\014\007\uffbc\011" +
    "\uffbc\024\uffbc\052\uffbc\066\uffbc\001\002\000\014\007\uffb9" +
    "\011\uffb9\024\uffb9\052\uffb9\066\uffb9\001\002\000\004\011" +
    "\236\001\002\000\044\002\ufff5\003\ufff5\007\ufff5\037\ufff5" +
    "\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\053\ufff5\056\ufff5\061\ufff5\062\ufff5\065\ufff5\067\ufff5" +
    "\001\002\000\042\002\000\003\030\007\021\037\014\042" +
    "\023\043\007\044\041\045\020\046\010\047\031\050\027" +
    "\053\035\056\016\062\015\065\036\067\025\001\002\000" +
    "\004\040\231\001\002\000\004\023\204\001\002\000\004" +
    "\023\171\001\002\000\004\011\170\001\002\000\014\007" +
    "\uffba\011\uffba\024\uffba\052\uffba\066\uffba\001\002\000\010" +
    "\012\167\013\166\052\137\001\002\000\004\011\165\001" +
    "\002\000\014\007\uffbd\011\uffbd\024\uffbd\052\uffbd\066\uffbd" +
    "\001\002\000\044\002\ufffb\003\ufffb\007\ufffb\037\ufffb\042" +
    "\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb" +
    "\053\ufffb\056\ufffb\061\ufffb\062\ufffb\065\ufffb\067\ufffb\001" +
    "\002\000\004\007\151\001\002\000\004\011\150\001\002" +
    "\000\004\007\uffb6\001\002\000\004\011\147\001\002\000" +
    "\004\007\uffb7\001\002\000\004\007\142\001\002\000\044" +
    "\002\ufff4\003\ufff4\007\ufff4\037\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\053\ufff4\056\ufff4" +
    "\061\ufff4\062\ufff4\065\ufff4\067\ufff4\001\002\000\004\011" +
    "\141\001\002\000\004\023\043\001\002\000\014\007\uffb8" +
    "\011\uffb8\024\uffb8\052\uffb8\066\uffb8\001\002\000\044\002" +
    "\ufffa\003\ufffa\007\ufffa\037\ufffa\042\ufffa\043\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\053\ufffa\056\ufffa\061" +
    "\ufffa\062\ufffa\065\ufffa\067\ufffa\001\002\000\004\002\042" +
    "\001\002\000\014\007\uffbb\011\uffbb\024\uffbb\052\uffbb\066" +
    "\uffbb\001\002\000\004\002\001\001\002\000\004\007\044" +
    "\001\002\000\004\052\137\001\002\000\004\011\046\001" +
    "\002\000\026\004\047\005\052\006\050\007\055\010\062" +
    "\015\051\023\056\030\057\054\053\055\054\001\002\000" +
    "\050\011\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\024\uffc6\026\uffc6\027\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\064\uffc6\066\uffc6" +
    "\001\002\000\050\011\uffc4\014\uffc4\015\uffc4\016\uffc4\017" +
    "\uffc4\020\uffc4\021\uffc4\022\uffc4\024\uffc4\026\uffc4\027\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\064" +
    "\uffc4\066\uffc4\001\002\000\026\004\047\005\052\006\050" +
    "\007\055\010\062\015\051\023\056\030\057\054\053\055" +
    "\054\001\002\000\050\011\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5\026\uffc5\027" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\064\uffc5\066\uffc5\001\002\000\050\011\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\024\uffc3" +
    "\026\uffc3\027\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\036\uffc3\064\uffc3\066\uffc3\001\002\000\050\011\uffc2" +
    "\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\024\uffc2\026\uffc2\027\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\064\uffc2\066\uffc2\001\002\000" +
    "\046\011\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\024\uffc9\026\uffc9\027\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\066\uffc9\001\002" +
    "\000\026\004\047\005\052\006\050\007\055\010\062\015" +
    "\051\023\056\030\057\054\053\055\054\001\002\000\026" +
    "\004\047\005\052\006\050\007\055\010\062\015\051\023" +
    "\056\030\057\054\053\055\054\001\002\000\042\011\102" +
    "\014\073\015\066\016\070\017\076\020\064\021\074\022" +
    "\072\026\100\027\063\031\065\032\077\033\067\034\101" +
    "\035\075\036\071\001\002\000\046\011\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\024\uffc8" +
    "\026\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\066\uffc8\001\002\000\050\011\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\024" +
    "\uffc7\026\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\064\uffc7\066\uffc7\001\002\000\026\004" +
    "\047\005\052\006\050\007\055\010\062\015\051\023\056" +
    "\030\057\054\053\055\054\001\002\000\026\004\047\005" +
    "\052\006\050\007\055\010\062\015\051\023\056\030\057" +
    "\054\053\055\054\001\002\000\026\004\047\005\052\006" +
    "\050\007\055\010\062\015\051\023\056\030\057\054\053" +
    "\055\054\001\002\000\026\004\047\005\052\006\050\007" +
    "\055\010\062\015\051\023\056\030\057\054\053\055\054" +
    "\001\002\000\026\004\047\005\052\006\050\007\055\010" +
    "\062\015\051\023\056\030\057\054\053\055\054\001\002" +
    "\000\026\004\047\005\052\006\050\007\055\010\062\015" +
    "\051\023\056\030\057\054\053\055\054\001\002\000\026" +
    "\004\047\005\052\006\050\007\055\010\062\015\051\023" +
    "\056\030\057\054\053\055\054\001\002\000\026\004\047" +
    "\005\052\006\050\007\055\010\062\015\051\023\056\030" +
    "\057\054\053\055\054\001\002\000\026\004\047\005\052" +
    "\006\050\007\055\010\062\015\051\023\056\030\057\054" +
    "\053\055\054\001\002\000\026\004\047\005\052\006\050" +
    "\007\055\010\062\015\051\023\056\030\057\054\053\055" +
    "\054\001\002\000\026\004\047\005\052\006\050\007\055" +
    "\010\062\015\051\023\056\030\057\054\053\055\054\001" +
    "\002\000\026\004\047\005\052\006\050\007\055\010\062" +
    "\015\051\023\056\030\057\054\053\055\054\001\002\000" +
    "\026\004\047\005\052\006\050\007\055\010\062\015\051" +
    "\023\056\030\057\054\053\055\054\001\002\000\026\004" +
    "\047\005\052\006\050\007\055\010\062\015\051\023\056" +
    "\030\057\054\053\055\054\001\002\000\026\004\047\005" +
    "\052\006\050\007\055\010\062\015\051\023\056\030\057" +
    "\054\053\055\054\001\002\000\004\007\021\001\002\000" +
    "\004\024\uffbf\001\002\000\004\024\107\001\002\000\004" +
    "\024\uffbe\001\002\000\004\024\uffc0\001\002\000\004\060" +
    "\110\001\002\000\040\003\030\007\021\037\014\042\023" +
    "\043\007\044\041\045\020\046\010\047\031\050\027\053" +
    "\035\056\016\062\015\065\036\067\025\001\002\000\042" +
    "\003\030\007\021\037\014\042\023\043\007\044\041\045" +
    "\020\046\010\047\031\050\027\053\035\056\016\061\113" +
    "\062\015\065\036\067\025\001\002\000\044\002\uffff\003" +
    "\uffff\007\uffff\037\uffff\042\uffff\043\uffff\044\uffff\045\uffff" +
    "\046\uffff\047\uffff\050\uffff\053\uffff\056\uffff\061\uffff\062" +
    "\uffff\065\uffff\067\uffff\001\002\000\044\002\uffc1\003\uffc1" +
    "\007\uffc1\037\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\053\uffc1\056\uffc1\061\uffc1\062\uffc1" +
    "\065\uffc1\067\uffc1\001\002\000\046\011\uffcd\014\073\015" +
    "\066\016\070\017\076\020\064\021\074\022\072\024\uffcd" +
    "\026\uffcd\027\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\066\uffcd\001\002\000\046\011\uffd3\014\073" +
    "\015\066\016\070\017\076\020\064\021\074\022\072\024" +
    "\uffd3\026\uffd3\027\063\031\065\032\077\033\067\034\101" +
    "\035\075\036\071\066\uffd3\001\002\000\046\011\uffcf\014" +
    "\073\015\066\016\070\017\076\020\064\021\074\022\072" +
    "\024\uffcf\026\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\066\uffcf\001\002\000\046\011\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\064\021\074\022" +
    "\uffd7\024\uffd7\026\uffd7\027\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\066\uffd7\001\002\000\046\011" +
    "\uffcc\014\073\015\066\016\070\017\076\020\064\021\074" +
    "\022\072\024\uffcc\026\uffcc\027\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\066\uffcc\001\002\000\042" +
    "\011\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\022\uffd5\024" +
    "\uffd5\026\uffd5\027\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\066\uffd5\001\002\000\046\011\uffda\014" +
    "\uffda\015\uffda\016\070\017\076\020\064\021\074\022\072" +
    "\024\uffda\026\uffda\027\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\066\uffda\001\002\000\046\011\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\064\021\074\022" +
    "\uffd4\024\uffd4\026\uffd4\027\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\066\uffd4\001\002\000\046\011" +
    "\uffcb\014\073\015\066\016\070\017\076\020\064\021\074" +
    "\022\072\024\uffcb\026\uffcb\027\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\066\uffcb\001\002\000\046" +
    "\011\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\064\021" +
    "\074\022\uffd8\024\uffd8\026\uffd8\027\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\066\uffd8\001\002\000" +
    "\046\011\uffce\014\073\015\066\016\070\017\076\020\064" +
    "\021\074\022\072\024\uffce\026\uffce\027\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\066\uffce\001\002" +
    "\000\046\011\uffd9\014\uffd9\015\uffd9\016\070\017\076\020" +
    "\064\021\074\022\072\024\uffd9\026\uffd9\027\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\066\uffd9\001" +
    "\002\000\046\011\uffd0\014\073\015\066\016\070\017\076" +
    "\020\064\021\074\022\072\024\uffd0\026\uffd0\027\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\066\uffd0" +
    "\001\002\000\042\011\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\022\uffd6\024\uffd6\026\uffd6\027\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\036\uffd6\066\uffd6\001\002\000" +
    "\046\011\uffd2\014\073\015\066\016\070\017\076\020\064" +
    "\021\074\022\072\024\uffd2\026\uffd2\027\uffd2\031\065\032" +
    "\077\033\067\034\101\035\075\036\071\066\uffd2\001\002" +
    "\000\046\011\uffd1\014\073\015\066\016\070\017\076\020" +
    "\064\021\074\022\072\024\uffd1\026\uffd1\027\uffd1\031\065" +
    "\032\077\033\067\034\101\035\075\036\071\066\uffd1\001" +
    "\002\000\042\014\073\015\066\016\070\017\076\020\064" +
    "\021\074\022\072\024\135\026\100\027\063\031\065\032" +
    "\077\033\067\034\101\035\075\036\071\001\002\000\046" +
    "\011\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021" +
    "\uffca\022\uffca\024\uffca\026\uffca\027\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\066\uffca\001\002\000" +
    "\046\011\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\024\uffdb\026\uffdb\027\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\066\uffdb\001\002" +
    "\000\026\004\047\005\052\006\050\007\055\010\062\015" +
    "\051\023\056\030\057\054\053\055\054\001\002\000\044" +
    "\011\uffe0\014\073\015\066\016\070\017\076\020\064\021" +
    "\074\022\072\024\uffe0\026\100\027\063\031\065\032\077" +
    "\033\067\034\101\035\075\036\071\001\002\000\044\002" +
    "\ufffd\003\ufffd\007\ufffd\037\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\053\ufffd\056\ufffd\061" +
    "\ufffd\062\ufffd\065\ufffd\067\ufffd\001\002\000\004\051\143" +
    "\001\002\000\016\042\023\043\007\044\041\045\020\046" +
    "\010\065\036\001\002\000\006\011\uffe2\052\145\001\002" +
    "\000\026\004\047\005\052\006\050\007\055\010\062\015" +
    "\051\023\056\030\057\054\053\055\054\001\002\000\042" +
    "\011\uffe1\014\073\015\066\016\070\017\076\020\064\021" +
    "\074\022\072\026\100\027\063\031\065\032\077\033\067" +
    "\034\101\035\075\036\071\001\002\000\044\002\ufff3\003" +
    "\ufff3\007\ufff3\037\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\050\ufff3\053\ufff3\056\ufff3\061\ufff3\062" +
    "\ufff3\065\ufff3\067\ufff3\001\002\000\044\002\ufffc\003\ufffc" +
    "\007\ufffc\037\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046" +
    "\ufffc\047\ufffc\050\ufffc\053\ufffc\056\ufffc\061\ufffc\062\ufffc" +
    "\065\ufffc\067\ufffc\001\002\000\004\023\152\001\002\000" +
    "\006\007\153\024\154\001\002\000\004\052\163\001\002" +
    "\000\004\011\uffe7\001\002\000\006\024\157\066\156\001" +
    "\002\000\004\007\160\001\002\000\004\011\uffe8\001\002" +
    "\000\004\052\161\001\002\000\026\004\047\005\052\006" +
    "\050\007\055\010\062\015\051\023\056\030\057\054\053" +
    "\055\054\001\002\000\044\014\073\015\066\016\070\017" +
    "\076\020\064\021\074\022\072\024\uffe6\026\100\027\063" +
    "\031\065\032\077\033\067\034\101\035\075\036\071\066" +
    "\uffe6\001\002\000\026\004\047\005\052\006\050\007\055" +
    "\010\062\015\051\023\056\030\057\054\053\055\054\001" +
    "\002\000\044\014\073\015\066\016\070\017\076\020\064" +
    "\021\074\022\072\024\uffe5\026\100\027\063\031\065\032" +
    "\077\033\067\034\101\035\075\036\071\066\uffe5\001\002" +
    "\000\044\002\ufff8\003\ufff8\007\ufff8\037\ufff8\042\ufff8\043" +
    "\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\053\ufff8" +
    "\056\ufff8\061\ufff8\062\ufff8\065\ufff8\067\ufff8\001\002\000" +
    "\006\011\uffe3\024\uffe3\001\002\000\006\011\uffe4\024\uffe4" +
    "\001\002\000\044\002\ufff9\003\ufff9\007\ufff9\037\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9" +
    "\053\ufff9\056\ufff9\061\ufff9\062\ufff9\065\ufff9\067\ufff9\001" +
    "\002\000\026\004\047\005\052\006\050\007\055\010\062" +
    "\015\051\023\056\030\057\054\053\055\054\001\002\000" +
    "\042\014\073\015\066\016\070\017\076\020\064\021\074" +
    "\022\072\024\173\026\100\027\063\031\065\032\077\033" +
    "\067\034\101\035\075\036\071\001\002\000\004\060\174" +
    "\001\002\000\040\003\030\007\021\037\014\042\023\043" +
    "\007\044\041\045\020\046\010\047\031\050\027\053\035" +
    "\056\016\062\015\065\036\067\025\001\002\000\042\003" +
    "\030\007\021\037\014\042\023\043\007\044\041\045\020" +
    "\046\010\047\031\050\027\053\035\056\016\061\176\062" +
    "\015\065\036\067\025\001\002\000\046\002\uffdd\003\uffdd" +
    "\007\uffdd\037\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\053\uffdd\056\uffdd\057\177\061\uffdd" +
    "\062\uffdd\065\uffdd\067\uffdd\001\002\000\006\056\016\060" +
    "\201\001\002\000\044\002\uffdf\003\uffdf\007\uffdf\037\uffdf" +
    "\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\053\uffdf\056\uffdf\061\uffdf\062\uffdf\065\uffdf\067\uffdf" +
    "\001\002\000\040\003\030\007\021\037\014\042\023\043" +
    "\007\044\041\045\020\046\010\047\031\050\027\053\035" +
    "\056\016\062\015\065\036\067\025\001\002\000\042\003" +
    "\030\007\021\037\014\042\023\043\007\044\041\045\020" +
    "\046\010\047\031\050\027\053\035\056\016\061\203\062" +
    "\015\065\036\067\025\001\002\000\044\002\uffde\003\uffde" +
    "\007\uffde\037\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046" +
    "\uffde\047\uffde\050\uffde\053\uffde\056\uffde\061\uffde\062\uffde" +
    "\065\uffde\067\uffde\001\002\000\026\004\047\005\052\006" +
    "\050\007\055\010\062\015\051\023\056\030\057\054\053" +
    "\055\054\001\002\000\042\014\073\015\066\016\070\017" +
    "\076\020\064\021\074\022\072\024\206\026\100\027\063" +
    "\031\065\032\077\033\067\034\101\035\075\036\071\001" +
    "\002\000\004\060\207\001\002\000\016\004\047\005\052" +
    "\006\050\010\062\054\053\055\054\001\002\000\022\004" +
    "\047\005\052\006\050\010\062\054\053\055\054\061\217" +
    "\063\216\001\002\000\004\064\212\001\002\000\004\060" +
    "\213\001\002\000\040\003\030\007\021\037\014\042\023" +
    "\043\007\044\041\045\020\046\010\047\031\050\027\053" +
    "\035\056\016\062\015\065\036\067\025\001\002\000\042" +
    "\003\030\007\021\037\014\042\023\043\007\044\041\045" +
    "\020\046\010\047\031\050\027\053\035\056\016\061\215" +
    "\062\015\065\036\067\025\001\002\000\022\004\uffef\005" +
    "\uffef\006\uffef\010\uffef\054\uffef\055\uffef\061\uffef\063\uffef" +
    "\001\002\000\004\064\225\001\002\000\044\002\ufff2\003" +
    "\ufff2\007\ufff2\037\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2" +
    "\046\ufff2\047\ufff2\050\ufff2\053\ufff2\056\ufff2\061\ufff2\062" +
    "\ufff2\065\ufff2\067\ufff2\001\002\000\004\064\221\001\002" +
    "\000\004\060\222\001\002\000\040\003\030\007\021\037" +
    "\014\042\023\043\007\044\041\045\020\046\010\047\031" +
    "\050\027\053\035\056\016\062\015\065\036\067\025\001" +
    "\002\000\042\003\030\007\021\037\014\042\023\043\007" +
    "\044\041\045\020\046\010\047\031\050\027\053\035\056" +
    "\016\061\224\062\015\065\036\067\025\001\002\000\022" +
    "\004\ufff0\005\ufff0\006\ufff0\010\ufff0\054\ufff0\055\ufff0\061" +
    "\ufff0\063\ufff0\001\002\000\004\060\226\001\002\000\040" +
    "\003\030\007\021\037\014\042\023\043\007\044\041\045" +
    "\020\046\010\047\031\050\027\053\035\056\016\062\015" +
    "\065\036\067\025\001\002\000\042\003\030\007\021\037" +
    "\014\042\023\043\007\044\041\045\020\046\010\047\031" +
    "\050\027\053\035\056\016\061\230\062\015\065\036\067" +
    "\025\001\002\000\044\002\ufff1\003\ufff1\007\ufff1\037\ufff1" +
    "\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\053\ufff1\056\ufff1\061\ufff1\062\ufff1\065\ufff1\067\ufff1" +
    "\001\002\000\004\041\232\001\002\000\004\023\233\001" +
    "\002\000\026\004\047\005\052\006\050\007\055\010\062" +
    "\015\051\023\056\030\057\054\053\055\054\001\002\000" +
    "\042\014\073\015\066\016\070\017\076\020\064\021\074" +
    "\022\072\024\235\026\100\027\063\031\065\032\077\033" +
    "\067\034\101\035\075\036\071\001\002\000\004\011\uffdc" +
    "\001\002\000\044\002\ufff7\003\ufff7\007\ufff7\037\ufff7\042" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7" +
    "\053\ufff7\056\ufff7\061\ufff7\062\ufff7\065\ufff7\067\ufff7\001" +
    "\002\000\004\023\240\001\002\000\006\007\241\024\242" +
    "\001\002\000\004\051\256\001\002\000\004\060\253\001" +
    "\002\000\006\024\246\066\245\001\002\000\006\024\uffeb" +
    "\066\uffeb\001\002\000\004\007\241\001\002\000\004\060" +
    "\247\001\002\000\040\003\030\007\021\037\014\042\023" +
    "\043\007\044\041\045\020\046\010\047\031\050\027\053" +
    "\035\056\016\062\015\065\036\067\025\001\002\000\042" +
    "\003\030\007\021\037\014\042\023\043\007\044\041\045" +
    "\020\046\010\047\031\050\027\053\035\056\016\061\251" +
    "\062\015\065\036\067\025\001\002\000\044\002\uffee\003" +
    "\uffee\007\uffee\037\uffee\042\uffee\043\uffee\044\uffee\045\uffee" +
    "\046\uffee\047\uffee\050\uffee\053\uffee\056\uffee\061\uffee\062" +
    "\uffee\065\uffee\067\uffee\001\002\000\006\024\uffec\066\uffec" +
    "\001\002\000\040\003\030\007\021\037\014\042\023\043" +
    "\007\044\041\045\020\046\010\047\031\050\027\053\035" +
    "\056\016\062\015\065\036\067\025\001\002\000\042\003" +
    "\030\007\021\037\014\042\023\043\007\044\041\045\020" +
    "\046\010\047\031\050\027\053\035\056\016\061\255\062" +
    "\015\065\036\067\025\001\002\000\044\002\uffed\003\uffed" +
    "\007\uffed\037\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046" +
    "\uffed\047\uffed\050\uffed\053\uffed\056\uffed\061\uffed\062\uffed" +
    "\065\uffed\067\uffed\001\002\000\016\042\023\043\007\044" +
    "\041\045\020\046\010\065\036\001\002\000\010\024\uffe9" +
    "\052\260\066\uffe9\001\002\000\026\004\047\005\052\006" +
    "\050\007\055\010\062\015\051\023\056\030\057\054\053" +
    "\055\054\001\002\000\044\014\073\015\066\016\070\017" +
    "\076\020\064\021\074\022\072\024\uffea\026\100\027\063" +
    "\031\065\032\077\033\067\034\101\035\075\036\071\066" +
    "\uffea\001\002\000\044\002\ufff6\003\ufff6\007\ufff6\037\ufff6" +
    "\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050" +
    "\ufff6\053\ufff6\056\ufff6\061\ufff6\062\ufff6\065\ufff6\067\ufff6" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\040\002\037\003\012\004\031\005\004\006" +
    "\033\007\010\010\003\011\011\012\032\014\016\015\021" +
    "\020\005\021\036\026\023\031\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\031\005\111\006\033\007\010\010\003\011\011" +
    "\012\032\014\016\015\021\020\005\021\036\026\023\031" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\057\017\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\135\017" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\133\017\060\001" +
    "\001\000\006\016\132\017\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\131\017" +
    "\060\001\001\000\006\016\130\017\060\001\001\000\006" +
    "\016\127\017\060\001\001\000\006\016\126\017\060\001" +
    "\001\000\006\016\125\017\060\001\001\000\006\016\124" +
    "\017\060\001\001\000\006\016\123\017\060\001\001\000" +
    "\006\016\122\017\060\001\001\000\006\016\121\017\060" +
    "\001\001\000\006\016\120\017\060\001\001\000\006\016" +
    "\117\017\060\001\001\000\006\016\116\017\060\001\001" +
    "\000\006\016\115\017\060\001\001\000\006\016\114\017" +
    "\060\001\001\000\006\016\113\017\060\001\001\000\012" +
    "\010\105\013\103\014\102\015\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\110\004\031\005\004\006" +
    "\033\007\010\010\003\011\011\012\032\014\016\015\021" +
    "\020\005\021\036\026\023\031\025\001\001\000\034\004" +
    "\031\005\111\006\033\007\010\010\003\011\011\012\032" +
    "\014\016\015\021\020\005\021\036\026\023\031\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\137\017\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\143\001\001\000\002\001\001\000\006" +
    "\016\145\017\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\161\017\060\001\001\000\002\001\001\000" +
    "\006\016\163\017\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\171\017\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\174\004\031\005\004\006" +
    "\033\007\010\010\003\011\011\012\032\014\016\015\021" +
    "\020\005\021\036\026\023\031\025\001\001\000\034\004" +
    "\031\005\111\006\033\007\010\010\003\011\011\012\032" +
    "\014\016\015\021\020\005\021\036\026\023\031\025\001" +
    "\001\000\002\001\001\000\004\011\177\001\001\000\002" +
    "\001\001\000\036\003\201\004\031\005\004\006\033\007" +
    "\010\010\003\011\011\012\032\014\016\015\021\020\005" +
    "\021\036\026\023\031\025\001\001\000\034\004\031\005" +
    "\111\006\033\007\010\010\003\011\011\012\032\014\016" +
    "\015\021\020\005\021\036\026\023\031\025\001\001\000" +
    "\002\001\001\000\006\016\204\017\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\210\024\207\001" +
    "\001\000\004\017\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\213\004\031\005\004\006\033\007" +
    "\010\010\003\011\011\012\032\014\016\015\021\020\005" +
    "\021\036\026\023\031\025\001\001\000\034\004\031\005" +
    "\111\006\033\007\010\010\003\011\011\012\032\014\016" +
    "\015\021\020\005\021\036\026\023\031\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\222\004\031\005" +
    "\004\006\033\007\010\010\003\011\011\012\032\014\016" +
    "\015\021\020\005\021\036\026\023\031\025\001\001\000" +
    "\034\004\031\005\111\006\033\007\010\010\003\011\011" +
    "\012\032\014\016\015\021\020\005\021\036\026\023\031" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\226\004\031\005\004\006\033\007\010\010\003\011" +
    "\011\012\032\014\016\015\021\020\005\021\036\026\023" +
    "\031\025\001\001\000\034\004\031\005\111\006\033\007" +
    "\010\010\003\011\011\012\032\014\016\015\021\020\005" +
    "\021\036\026\023\031\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\233\017\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\242\032\243\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\251\001\001\000\002\001\001" +
    "\000\036\003\247\004\031\005\004\006\033\007\010\010" +
    "\003\011\011\012\032\014\016\015\021\020\005\021\036" +
    "\026\023\031\025\001\001\000\034\004\031\005\111\006" +
    "\033\007\010\010\003\011\011\012\032\014\016\015\021" +
    "\020\005\021\036\026\023\031\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\253\004\031\005\004" +
    "\006\033\007\010\010\003\011\011\012\032\014\016\015" +
    "\021\020\005\021\036\026\023\031\025\001\001\000\034" +
    "\004\031\005\111\006\033\007\010\010\003\011\011\012" +
    "\032\014\016\015\021\020\005\021\036\026\023\031\025" +
    "\001\001\000\002\001\001\000\004\020\256\001\001\000" +
    "\002\001\001\000\006\016\260\017\060\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Analizador s;
    parser(Analizador s) {this.s = s;}

    public LinkedList<ErroresExpresiones> erroresSintacticos = new LinkedList<>();

    // Errores recuperables.
    public void syntax_error(Symbol s) {
        erroresSintacticos.add(new ErroresExpresiones("SINTÁCTICO RECUPERABLE",
                    "No se esperaba el componente " + s.value,
                    s.left,
                    s.right));
    }

    // Errores no recuperables.
    public void unrecovered_syntax_error(Symbol s) {
        erroresSintacticos.add(new ErroresExpresiones("SINTÁCTICO NO RECUPERABLE",
                    "No se esperaba el componente "+s.value,
                    s.left,
                    s.right));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>();
                                   RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION FIN_CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= RUN FIN_CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= MATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= AUTOINCREMENTO FIN_CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= AUTODECREMENTO FIN_CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= DECLARACION FIN_CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= ASIGNACIONVAR FIN_CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= error FIN_CADENA 
            {
              Instruccion RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MATCH ::= MATCH_LEX PARENT_IZQ EXPRESION PARENT_DER LLAVE_IZQ CASES_LISTA LLAVE_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseInstruccion> b = (LinkedList<CaseInstruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MatchInstruccion(a, b, null, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATCH",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MATCH ::= MATCH_LEX PARENT_IZQ EXPRESION PARENT_DER LLAVE_IZQ CASES_LISTA DEFAULT_LEX CASE_SIMBOL LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<CaseInstruccion> b = (LinkedList<CaseInstruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MatchInstruccion(a, b, new CaseInstruccion(null, c, aleft, aright), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATCH",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CASES_LISTA ::= CASES_LISTA EXPRESIONES_NATIVAS CASE_SIMBOL LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              LinkedList<CaseInstruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<CaseInstruccion> a = (LinkedList<CaseInstruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 a.add(new CaseInstruccion((NativoExpresion) b, c, bleft, bright));
                                                                                                       RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES_LISTA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CASES_LISTA ::= EXPRESIONES_NATIVAS CASE_SIMBOL LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              LinkedList<CaseInstruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<CaseInstruccion>();
                                                                                          RESULT.add(new CaseInstruccion((NativoExpresion) a, b, aleft, aright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES_LISTA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // METODO ::= TIPOS ID PARENT_IZQ PARAMS PARENT_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> d = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MetodoInstruccion(b, d, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // METODO ::= TIPOS ID PARENT_IZQ PARENT_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MetodoInstruccion(b, new LinkedList<HashMap>(), c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMS ::= PARAMS COMA PARAM 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Object> b = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                                    RESULT.add(b);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMS ::= PARAM 
            {
              LinkedList<HashMap> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Object> b = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>();
                      RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAM ::= ID DOS_PUNTOS TIPOS ASIGNACION EXPRESION 
            {
              HashMap<String,Object> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 var hm2 = new HashMap<String, Object>();
                                                 hm2.put("tipo", a);
                                                 hm2.put("id", b);
                                                 hm2.put("expresion", c);
                                                 RESULT = hm2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAM ::= ID DOS_PUNTOS TIPOS 
            {
              HashMap<String,Object> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 var hm = new HashMap<String, Object>();
                          hm.put("tipo", a);
                          hm.put("id", b);
                          hm.put("expresion", null);
                          RESULT = hm; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RUN ::= RUN_MAIN ID PARENT_IZQ PARAMSCALL PARENT_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RunMainInstruccion(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RUN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RUN ::= RUN_MAIN ID PARENT_IZQ PARENT_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RunMainInstruccion(a, new LinkedList<HashMap>(), aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RUN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMSCALL ::= PARAMSCALL COMA ID ASIGNACION EXPRESION 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 var hm2 = new HashMap<String, Object>();
                                                                hm2.put("id", b);
                                                                hm2.put("expresion", c);
                                                                RESULT = a;
                                                                RESULT.add(hm2);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMSCALL ::= ID ASIGNACION EXPRESION 
            {
              LinkedList<HashMap> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 var hm = new HashMap<String, Object>();
                                              hm.put("id", b);
                                              hm.put("expresion", c);
                                              RESULT = new LinkedList<HashMap>();
                                              RESULT.add(hm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AUTOINCREMENTO ::= ID INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncrementoExpresion(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUTOINCREMENTO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AUTODECREMENTO ::= ID DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DecrementoExpresion(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUTODECREMENTO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= MUTABILIDAD ID DOS_PUNTOS TIPOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionInstruccion(a, b, null,c, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= MUTABILIDAD ID DOS_PUNTOS TIPOS ASIGNACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionInstruccion(a, b, d, c, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGNACIONVAR ::= ID ASIGNACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVariableInstruccion(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVAR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SIF ::= IF PARENT_IZQ EXPRESION PARENT_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfElseIfInstruccion(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SIF ::= IF PARENT_IZQ EXPRESION PARENT_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER ELSE LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElseInstruccion(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SIF ::= IF PARENT_IZQ EXPRESION PARENT_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfInstruccion(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IMPRESION ::= CONSOLE PUNTO LOG PARENT_IZQ EXPRESION PARENT_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ImprimirInstruccion(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NegacionUnariaExpresion(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SumaExpresion(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RestaExpresion(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultiplicacionExpresion(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivisionExpresion(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION POW EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PotenciaExpresion(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION ROOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RaizExpresion(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ModuloExpresion(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrExpresion(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndExpresion(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotExpresion(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESION IGUALDAD EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IgualacionExpresion(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION DIFERENTE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DiferenciacionExpresion(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MenorQueExpresion(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION MENOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MenorIgualQueExpresion(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MayorQueExpresion(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION MAYOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MayorIgualQueExpresion(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= PARENT_IZQ EXPRESION PARENT_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVariableExpresion(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESIONES_NATIVAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESIONES_NATIVAS ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 char valor = a.charAt(1);
                                      RESULT = new NativoExpresion(valor, new Tipo(TipoDato.CARACTER), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NATIVAS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESIONES_NATIVAS ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NativoExpresion(a, new Tipo(TipoDato.CADENA), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NATIVAS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESIONES_NATIVAS ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NativoExpresion(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NATIVAS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESIONES_NATIVAS ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NativoExpresion(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NATIVAS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESIONES_NATIVAS ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NativoExpresion(true, new Tipo(TipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NATIVAS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESIONES_NATIVAS ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NativoExpresion(false, new Tipo(TipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NATIVAS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CFOR ::= FOR PARENT_IZQ ASIGNACIONVAR FIN_CADENA EXPRESION FIN_CADENA ACTUALIZA_FOR PARENT_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ForInstruccion(a, b, c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ACTUALIZA_FOR ::= ASIGNACIONVAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ACTUALIZA_FOR ::= AUTOINCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ACTUALIZA_FOR ::= AUTODECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPOS ::= BOOLEANO 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPOS ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MUTABILIDAD ::= LET 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MUTABILIDAD ::= CONST 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
